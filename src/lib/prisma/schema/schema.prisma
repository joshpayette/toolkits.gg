generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql", "driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum GameId {
  none
  coe33
  rem2
}

model User {
  id                      String                   @id @default(cuid())
  username                String                   @unique
  email                   String                   @unique
  emailVerified           Boolean                  @default(false)
  passwordHash            String
  sessions                Session[]
  passwordResetTokens     PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]

  userProfile        UserProfile?
  userCollectedItems UserCollectedItem[]
  userFavoriteGames  UserFavoriteGame[]

  usersBeingFollowed UserFollowedUsers[] @relation("userBeingFollowed")
  usersFollowed      UserFollowedUsers[] @relation("userFollowed")

  baseBuilds       BaseBuild[]
  buildCollections BuildCollection[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model PasswordResetToken {
  tokenHash String   @unique
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  code      String
  expiresAt DateTime
  email     String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model UserProfile {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String   @default("Traveler")
  bio         String   @default("No bio provided.") @db.Text
  avatarUrl   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique

  @@index([userId])
}

model UserFavoriteGame {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  gameId    GameId

  @@id(name: "id", [userId, gameId])
  @@index([userId])
}

model UserFollowedUsers {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation("userBeingFollowed", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  followedUser   User     @relation("userFollowed", fields: [followedUserId], references: [id], onDelete: Cascade)
  followedUserId String

  @@index([userId])
  @@index([followedUserId])
}

model BaseItem {
  id          String  @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  disabled    Boolean @default(false)
  optional    Boolean @default(false)

  coe33Item          COE33Item?
  userCollectedItems UserCollectedItem[]
}

model UserCollectedItem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  baseItem   BaseItem @relation(fields: [baseItemId], references: [id], onDelete: Cascade)
  baseItemId String
  quantity   Int      @default(1)

  @@index([userId])
  @@index([baseItemId])
}

enum BuildVisibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum BuildModeratorStatus {
  PENDING
  APPROVED
  REJECTED
  LOCKED
}

model BaseBuild {
  id              String               @id @default(cuid())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  createdBy       User?                @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById     String?
  name            String
  description     String?              @db.Text
  visibility      BuildVisibility      @default(PUBLIC)
  moderatorStatus BuildModeratorStatus @default(PENDING)
  videoUrl        String?
  imageUrl        String?
  thumbnailUrl    String?
  referenceUrl    String?

  buildCollectionCount BuildCollectionCount?
  buildDuplicateCount  BuildDuplicateCount?
  buildLikeCount       BuildLikeCount?
  buildViewCount       BuildViewCount?

  coe33Build       COE33Build?
  buildCollections BuildCollection[]

  @@index([createdById])
}

model BuildCollection {
  id              String               @id @default(cuid())
  createdBy       User                 @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById     String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  name            String
  description     String?              @db.Text
  visibility      BuildVisibility      @default(PUBLIC)
  moderatorStatus BuildModeratorStatus @default(PENDING)
  baseBuilds      BaseBuild[]
}

model BuildCollectionCount {
  id          String    @id @default(cuid())
  count       Int       @default(0)
  baseBuild   BaseBuild @relation(fields: [baseBuildId], references: [id], onDelete: Cascade)
  baseBuildId String    @unique

  @@index([baseBuildId])
}

model BuildLikeCount {
  id          String    @id @default(cuid())
  count       Int       @default(0)
  baseBuild   BaseBuild @relation(fields: [baseBuildId], references: [id], onDelete: Cascade)
  baseBuildId String    @unique

  @@index([baseBuildId])
}

model BuildDuplicateCount {
  id          String    @id @default(cuid())
  count       Int       @default(0)
  baseBuild   BaseBuild @relation(fields: [baseBuildId], references: [id], onDelete: Cascade)
  baseBuildId String    @unique

  @@index([baseBuildId])
}

model BuildViewCount {
  id          String    @id @default(cuid())
  count       Int       @default(0)
  baseBuild   BaseBuild @relation(fields: [baseBuildId], references: [id], onDelete: Cascade)
  baseBuildId String    @unique

  @@index([baseBuildId])
}
